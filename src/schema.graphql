type Ledger {
  blocks(id: ID): [Block]!
  blockHeight: Int!
  transaction(id: ID!): Transaction!
  transactions(id: ID, ids: [ID]): [Transaction]!
}

type Block {
  id: ID!
  transactions: [Transaction]!
}

type Mempool {
  transaction(id: ID!): Transaction!
  transactions(id: ID!): [Transaction]!
  transactionCount: Int!
}

type Outpoint {
  txId: String!,
  outputIndex: Int!
}

type TransactionInput {
  outpoint: Outpoint!
  address: String!
}

type TransactionOutput {
  value: Int!
  address: String!
}

type Transaction {
  id: String!
  fee: Float!
  inputs: [TransactionInput!]!
  outputs: [TransactionOutput!]!
}

type Query {
  transaction(id: ID!): Transaction!
  transactions(id: ID, ids: [ID]): [Transaction]!
}