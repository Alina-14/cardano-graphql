scalar DateTime

type Block {
  id: ID!
  hash: String!
  merkleRootHash: String!
  number: Int!
  previousBlock: Block
  size: Float!
  slot: Slot!
  transactions: [Transaction]!
}

input BlockFilter {
  epoch: Int
  slot: Int
  afterHeight: Int
  beforeHeight: Int
}

type Epoch {
  blocks: [Block]!
  number: Int!
  slots: [Slot!]!
  transactions: [Transaction]
}

type Ledger {
  blockHeight: Int!
}

type Slot {
  block: Block
  epoch: Epoch!
}

type TransactionInput {
  txId: String!,
  outputIndex: Int!
  address: String!
}

type TransactionOutput {
  value: String!
  address: String!
}

type Transaction {
  fee: Float!
  id: ID!
  inputs: [TransactionInput!]!
  outputs: [TransactionOutput!]!
}

input TransactionFilter {
  ids: [ID]
  blockNumbers: [Int]
}

type Query {
  block(id: ID!, filter: BlockFilter): Block
  blocks(ids: [String!], filter: BlockFilter): [Block!]!
  epoch(number: Int) : Epoch!
  epochs(numbers: [Int!]): [Epoch!]!
  transaction(id: ID!): Transaction
  transactions(ids: [ID], filter: TransactionFilter): [Transaction]!
  utxo(address: String): [TransactionOutput]!
}
